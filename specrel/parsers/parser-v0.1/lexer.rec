#include <string>
#include <cassert>
#include "lexer.h"
#include "parser.h"

#define YYCTYPE char

Lexer::Lexer(const std::string& str) :
	StrVal(str),
	PrevCursor(StrVal.data()),
	Cursor(StrVal.data()),
	CurrentToken(-1)
{

}
Lexer::Lexer(FILE* f) :
	CurrentToken(-1)
{
	fseek(f, 0, SEEK_END);
	long fsize = ftell(f);
	rewind(f);
	
	char* string = new char[fsize + 1];
	fread(string, fsize, 1, f);
	string[fsize] = '\0';

	StrVal = string;
	delete[] string;
	PrevCursor = StrVal.data();
	Cursor = StrVal.data();
}

size_t Lexer::TokenSize() const
{
	return (size_t)(Cursor - PrevCursor);
}
const char* Lexer::TokenText() const
{
	return PrevCursor;
}

int Lexer::NextToken()
{
	const YYCTYPE* YYMARKER;
	PrevCursor = Cursor;
	CurrentToken = -1;

start:
	{
		/*!max:re2c*/

		/*!re2c
		re2c:yyfill:enable = 0;
		re2c:define:YYCURSOR = Cursor;

		"//"[^\n]*              { PrevCursor = Cursor; goto start; }
		[ \t\n\r]               { PrevCursor = Cursor; goto start; }
		"<"                     { CurrentToken = TOKEN_LESSER;     goto end; }
		">"                     { CurrentToken = TOKEN_GREATER;    goto end; }
		":"                     { CurrentToken = TOKEN_COLON;      goto end; }
		","                     { CurrentToken = TOKEN_COMMA;      goto end; }
		"{"                     { CurrentToken = TOKEN_LBRACE;     goto end; }
		"}"                     { CurrentToken = TOKEN_RBRACE;     goto end; }
		";"                     { CurrentToken = TOKEN_SEMICOLON;  goto end; }
		[0]([xX])[0-9a-fA-F]+   { CurrentToken = TOKEN_HEXVAL;     goto end; }
		[-+]?[0-9]+([.][0-9]+)? { CurrentToken = TOKEN_NUMBER;     goto end; }
		[0-9a-zA-Z_]+           { CurrentToken = TOKEN_IDENTIFIER; goto end; }
		["][^"]*["]             { CurrentToken = TOKEN_STRING;     goto end; }
		"\x00"                  { CurrentToken = 0;                goto end; }
		*                       { CurrentToken = 0xFF;             goto end; }
		*/
	}

end:
	return CurrentToken;
}
